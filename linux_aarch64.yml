pool:
  name: Default
  demands:
  - Agent.OS -equals linux
  - Agent.OSArchitecture -equals ARM64
trigger:
- buildbranch_linux_aarch64
pr: none
stages:
- stage: stage_1
  jobs:
  - job: ros_noetic_camera_calibration_parsers
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-camera-calibration-parsers
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-camera-calibration-parsers
  - job: ros_noetic_image_transport
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-image-transport
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-image-transport
  - job: ros_noetic_cv_bridge
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-cv-bridge
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-cv-bridge
  - job: ros_noetic_rospy_message_converter
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-rospy-message-converter
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-rospy-message-converter
  - job: ros_noetic_image_geometry
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-image-geometry
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-image-geometry
  - job: ros_noetic_joy
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-joy
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-joy
- stage: stage_2
  jobs:
  - job: ros_noetic_camera_info_manager
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-camera-info-manager
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-camera-info-manager
  - job: ros_noetic_polled_camera
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-polled-camera
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-polled-camera
  - job: ros_noetic_compressed_depth_image_transport
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-compressed-depth-image-transport
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-compressed-depth-image-transport
  - job: ros_noetic_compressed_image_transport
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-compressed-image-transport
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-compressed-image-transport
  - job: ros_noetic_theora_image_transport
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-theora-image-transport
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-theora-image-transport
  - job: ros_noetic_vision_opencv
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-vision-opencv
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-vision-opencv
  - job: ros_noetic_camera_calibration
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-camera-calibration
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-camera-calibration
  - job: ros_noetic_depth_image_proc
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-depth-image-proc
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-depth-image-proc
  - job: ros_noetic_image_rotate
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-image-rotate
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-image-rotate
  - job: ros_noetic_image_view
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-image-view
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-image-view
  - job: ros_noetic_image_proc
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-image-proc
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-image-proc
- stage: stage_3
  jobs:
  - job: ros_noetic_image_common
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-image-common
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-image-common
  - job: ros_noetic_image_transport_plugins
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-image-transport-plugins
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-image-transport-plugins
  - job: ros_noetic_image_publisher
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-image-publisher
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-image-publisher
  - job: ros_noetic_stereo_image_proc
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-stereo-image-proc
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-stereo-image-proc
- stage: stage_4
  jobs:
  - job: ros_noetic_image_pipeline
    steps:
    - script: 'export CI=azure

        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME

        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})

        .scripts/run_docker_build.sh'
      env:
        ANACONDA_API_TOKEN: $(ANACONDA_API_TOKEN)
        CURRENT_BUILD_PKG_NAME: ros-noetic-image-pipeline
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      displayName: Build ros-noetic-image-pipeline
